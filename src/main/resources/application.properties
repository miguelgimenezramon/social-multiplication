# Port configuration to avoid conflicts
server.port=8080

# Gives us access to the H2 database web console
spring.h2.console.enabled=true
# Generates the database *only* if it's not there yet
spring.jpa.hibernate.ddl-auto=update
# Creates the database in a file
#spring.datasource.url=jdbc:h2:file:~/social-multiplication;DB_CLOSE_ON_EXIT=FALSE;
# For educational purposes we will show the SQL in console
spring.jpa.properties.hibernate.show_sql=true


spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/social-multiplication?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=Welcome1
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver

## RabbitMQ configuration
multiplication.exchange=multiplication_exchange
multiplication.solved.key=multiplication.solved

multiplicationHost=http://localhost:8000/api

#Service Discovery configuration , podra tener un valor dinamico una lista separada por comas , solucionarlo por dns.
eureka.client.service-url.default-zone=http://localhost:8761/eureka
spring.application.name=multiplication

logging.file.name=/home/rhel7/practicas/logs/social-multiplication.log

management.endpoints.web.exposure.include=*





